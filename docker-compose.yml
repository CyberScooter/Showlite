version: "3"
services:
  client:
    container_name: frontend
    build:
      context: ./client
      dockerfile: Dockerfile
    depends_on:
      - api-gateway
    ports:
      - 3000:3000
    volumes:
      - /usr/src/client/node_modules

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    restart: always
    ports:
      - 5010:5010
    environment:
      NODE_ENV: production
      JWT_TOKEN_SECRET: ioajdfoiajfaoidjfo
    volumes:
      - /usr/src/app/node_modules
      
  userservice:
    build:
      context: ./services/user
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - userservicedb
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      JWT_TOKEN_SECRET: ioajdfoiajfaoidjfo
      DATABASE_URL: postgres://root:123456@userservicedb:5432/usersdb
    volumes:
      - /usr/src/app/node_modules

  watchlistservice:
    build:
      context: ./services/watchlist
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - watchlistservicedb
    ports:
      - "5001:5001"
    environment:
      NODE_ENV: production
      JWT_TOKEN_SECRET: ioajdfoiajfaoidjfo
      DATABASE_URL: postgres://root:123456@watchlistservicedb:5432/watchlists
    volumes:
      - /usr/src/app/node_modules
      
  movieservice:
    build: ./services/movie/
    image: group6/movie-service
    ports:
      - "9001:9001"
    depends_on:
      movieservicedb:
        condition: service_healthy  
      serviceregistry:
        condition: service_healthy
    restart: on-failure

  reviewservice:
    build: ./services/review/
    ports:
      - "5002:5002"
    depends_on:
      - reviewservicedb
    environment:
      JWT_TOKEN_SECRET: ioajdfoiajfaoidjfo
      DATABASE_URL: postgres://root:123456@reviewservicedb:5432/reviews
    volumes:
      - /usr/src/app/node_modules

  userservicedb:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123456
    # ports:
    #   - "5434:5432"
    volumes:
      # - ./postgres-data:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ./services/user/sql:/docker-entrypoint-initdb.d

  movieservicedb:
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=group6
      - POSTGRES_DB=movies
    # ports:
    #   - "5435:5432"
    volumes:
      - /var/lib/postgresql/data
    healthcheck:
       test: "exit 0"

  reviewservicedb:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123456
    # ports:
    #   - "5436:5432"
    volumes:
      # - ./postgres-data:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ./services/review/sql:/docker-entrypoint-initdb.d
    
  watchlistservicedb:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123456
    # ports:
    #   - "5437:5432"
    volumes:
      # - ./postgres-data:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ./services/watchlist/sql:/docker-entrypoint-initdb.d

  serviceregistry:
    build: ./services/service-registry/
    image: group6/service-registry
    ports:
      - "8761:8761"
    healthcheck:
      test: "exit 0"

